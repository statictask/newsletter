# Variables for Go commands.
#

include ./rules/Makefile.settings

ifndef GO_DEF
GO_DEF = 1

GOSOURCES := $(shell \
	find . -name '*.go' | \
	grep -Ev './(proto|protogen|third_party|vendor)/' | \
	xargs)

ifdef DEBUG
$(info GOSOURCES = $(GOSOURCES))
endif

# Use linker flags to provide version settings to the target
# Also build it with as much as possible static links. It may do the build a bit slower
LDFLAGS=-ldflags "-X=${SETTINGS_GIT_REMOTE}/internal/global.Version=$(VERSION) -extldflags '-static'"

GOBASE := $(shell pwd)
GOBINDIR := "$(GOBASE)/build"

# Allow users to define GOFLAGS, but override it with flags mandatory for
# compilation.
GOFLAGS ?=

ifndef .GOFLAGS_GUARD
.GOFLAGS_GUARD := 1
override GOFLAGS := -mod=vendor $(GOFLAGS)
endif

export GOFLAGS

ifdef DEBUG
$(info GOFLAGS = $(GOFLAGS))
endif

# Allow users to set custom build tags.
GOBUILDTAGS ?=

# Allow users to set custom test timeout.
GOTESTTIMEOUT ?=

# Allow users to run specific tests
GOTESTRUN ?=

# Allow users to set all known build tags by passing ALLTAGS.
ifndef .ALLTAGS_GUARD
.ALLTAGS_GUARD := 1
ifdef ALLTAGS
override GOBUILDTAGS := integration $(GOBUILDTAGS)
endif
endif

GO ?= go
GOBUILD ?= $(GO) build
GOCLEAN ?= $(GO) clean
GOGENERATE ?= $(GO) generate
GOINSTALL ?= $(GO) install
GOMOD ?= $(GO) mod
GORUN ?= $(GO) run
GOTEST ?= $(GO) test
GOTOOL ?= $(GO) tool

ifndef .GOSETUP_GUARD
.GOSETUP_GUARD := 1
ifneq (,$(GOBUILDTAGS))
GOBUILD := $(GOBUILD) -tags='$(GOBUILDTAGS)'
GOTEST := $(GOTEST) -tags='$(GOBUILDTAGS)'
endif
ifneq (,$(GOTESTTIMEOUT))
GOTEST := $(GOTEST) -timeout='$(GOTESTTIMEOUT)'
endif
ifneq (,$(GOTESTRUN))
GOTEST := $(GOTEST) -run='$(GOTESTRUN)'
endif
endif

GOIMPORTS := $(GORUN) golang.org/x/tools/cmd/goimports
GOLANGCI_LINT := $(GORUN) github.com/golangci/golangci-lint/cmd/golangci-lint

.PHONY: go-install
go-install:
	@echo "Installing ${SETTINGS_PROJECT_NAME}"
	@GOBINDIR=$(GOBINDIR) $(GOINSTALL) $(LDFLAGS) ./...

.PHONY: go-clean
go-clean:
	@echo "Cleaning build cache"
	@GOBINDIR=$(GOBINDIR) $(GOCLEAN)

.PHONY: go-build
go-build:
	@echo "Building binary"
	@mkdir -p $(GOBINDIR)
	$(GOBUILD) $(LDFLAGS) -o $(GOBINDIR)/ ./...

.PHONY: go-test
go-test:
	@echo "Executing tests"
	$(GOTEST) -v -tags=unit -coverprofile=coverage.out ./... $(SILENT_CMD_SUFFIX)

.PHONY: go-cover
go-cover: go-cover/text

.PHONY: go-cover/html
go-cover/html:
	$(GOTOOL) cover -html=coverage.out

.PHONY: go-cover/text
go-cover/text:
	$(GOTOOL) cover -func=coverage.out

.PHONY: go-fix
go-fix:
	@echo "Making sure go.mod matches the source code"
	$(GOMOD) vendor
	$(GOMOD) tidy
ifneq ($(SOURCES),)
	$(GOIMPORTS) -w $(SOURCES)
endif

.PHONY: go-lint
go-lint:
	@echo ">  Running lint"
	$(GOLANGCI_LINT) run

endif
